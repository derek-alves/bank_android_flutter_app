// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

class MicroApp {
  MicroApp({
    required this.name,
    required this.route,
  });

  String name;

  String route;

  Object encode() {
    return <Object?>[
      name,
      route,
    ];
  }

  static MicroApp decode(Object result) {
    result as List<Object?>;
    return MicroApp(
      name: result[0]! as String,
      route: result[1]! as String,
    );
  }
}

class Route {
  Route({
    required this.path,
    required this.data,
  });

  String path;

  Map<String, String> data;

  Object encode() {
    return <Object?>[
      path,
      data,
    ];
  }

  static Route decode(Object result) {
    result as List<Object?>;
    return Route(
      path: result[0]! as String,
      data: (result[1] as Map<Object?, Object?>?)!.cast<String, String>(),
    );
  }
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is MicroApp) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    }    else if (value is Route) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        return MicroApp.decode(readValue(buffer)!);
      case 130: 
        return Route.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class FeatureHostApi {
  /// Constructor for [FeatureHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  FeatureHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

}

abstract class FlutterCommunicationChannel {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void navigateTo(Route route);

  List<MicroApp> syncFeatures();

  static void setUp(FlutterCommunicationChannel? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.main_module.FlutterCommunicationChannel.navigateTo$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.main_module.FlutterCommunicationChannel.navigateTo was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Route? arg_route = (args[0] as Route?);
          assert(arg_route != null,
              'Argument for dev.flutter.pigeon.main_module.FlutterCommunicationChannel.navigateTo was null, expected non-null Route.');
          try {
            api.navigateTo(arg_route!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.main_module.FlutterCommunicationChannel.syncFeatures$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            final List<MicroApp> output = api.syncFeatures();
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
